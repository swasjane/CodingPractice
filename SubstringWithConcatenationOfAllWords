You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.

You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
Output: []
Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
Output: [6,9,12]
 

Constraints:

1 <= s.length <= 104
s consists of lower-case English letters.
1 <= words.length <= 5000
1 <= words[i].length <= 30
words[i] consists of lower-case English letters.


Approach -->
1. Create hashMap of the words given
2. Substring from the main word s. Length = sum of length of array words. Further substring one word length which is three as per given example.
3. These substrings are stored in Map.
4. Both maps are compared.
5. use while loop to maintain the index. 




class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
       List<Integer> result = new ArrayList();
        if(s.length()==0 || words.length==0)return result;
        
        HashMap<String,Integer> map1 = new HashMap();
        
        for(int i=0;i<words.length;i++){
            map1.put(words[i],map1.getOrDefault(words[i],0)+1);
            //foo 1 bar 1
        }
        
        int t = words.length*words[0].length();  //6
        int sl = words[0].length(); //3
        
        int i = 0;
        while(i<=s.length()-t){//barfoothefoobarman
            
        String sub = s.substring(i,i+t);//barfoo 
        HashMap<String,Integer> map2 = new HashMap();
        int k = 0;
        int n = 0;
          while(k<words.length){
          String temp = sub.substring(n,n+sl);
          map2.put(temp,map2.getOrDefault(temp,0)+1);
          //map2  = foo 1 bar 1
          n = n+sl; 
          k++;  
          }
        if(map1.equals(map2))result.add(i);
          i++;  
        }
        return result;
    

    }
}
